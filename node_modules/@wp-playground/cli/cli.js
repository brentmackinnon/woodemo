import m from"fs";import v,{basename as z}from"path";import x from"yargs";import C from"express";import{SupportedPHPVersions as D,PHPResponse as U}from"@php-wasm/universal";import{logger as d,errorLogPath as L}from"@php-wasm/logger";import{runBlueprintSteps as M,compileBlueprint as _}from"@wp-playground/blueprints";import{EmscriptenDownloadMonitor as k,ProgressTracker as q}from"@php-wasm/progress";import{loadNodeRuntime as A,createNodeFsMountHandler as O}from"@php-wasm/node";import{RecommendedPHPVersion as T,zipDirectory as Z}from"@wp-playground/common";import{resolveWordPressRelease as j,bootWordPress as N}from"@wp-playground/wordpress";import{rootCertificates as V}from"tls";import g from"fs-extra";import G from"os";async function Y(t){const e=C(),i=await new Promise((p,c)=>{const a=e.listen(t.port,()=>{const l=a.address();l===null||typeof l=="string"?c(new Error("Server address is not available")):p(a)})});e.use("/",async(p,c)=>{const a=await t.handleRequest({url:p.url,headers:K(p),method:p.method,body:await J(p)});c.statusCode=a.httpStatusCode;for(const l in a.headers)c.setHeader(l,a.headers[l]);c.end(a.bytes)});const P=i.address().port;await t.onBind(P)}const J=async t=>await new Promise(e=>{const i=[];t.on("data",u=>{i.push(u)}),t.on("end",()=>{e(Buffer.concat(i))})}),K=t=>{const e={};if(t.rawHeaders&&t.rawHeaders.length)for(let i=0;i<t.rawHeaders.length;i+=2)e[t.rawHeaders[i].toLowerCase()]=t.rawHeaders[i+1];return e};function Q(t){return/^latest$|^trunk$|^nightly$|^(?:(\d+)\.(\d+)(?:\.(\d+))?)((?:-beta(?:\d+)?)|(?:-RC(?:\d+)?))?$/.test(t)}const $=v.join(G.homedir(),".wordpress-playground");async function X(t){return await S("https://github.com/WordPress/sqlite-database-integration/archive/refs/heads/main.zip","sqlite.zip",t)}async function S(t,e,i){const u=v.join($,e);return g.existsSync(u)||(g.ensureDirSync($),await ee(t,u,i)),E(u)}async function ee(t,e,i){const P=(await i.monitorFetch(fetch(t))).body.getReader(),p=`${e}.partial`,c=g.createWriteStream(p);for(;;){const{done:a,value:l}=await P.read();if(l&&c.write(l),a)break}c.close(),c.closed||await new Promise((a,l)=>{c.on("finish",w=>{w?(g.removeSync(p),l(w)):(g.renameSync(p,e),a(null))})})}function E(t,e){return new File([g.readFileSync(t)],e??z(t))}async function te(){const t=await x(process.argv.slice(2)).usage("Usage: wp-playground <command> [options]").positional("command",{describe:"Command to run",type:"string",choices:["server","run-blueprint","build-snapshot"]}).option("outfile",{describe:"When building, write to this output file.",type:"string",default:"wordpress.zip"}).option("port",{describe:"Port to listen on when serving.",type:"number",default:9400}).option("php",{describe:"PHP version to use.",type:"string",default:T,choices:D}).option("wp",{describe:"WordPress version to use.",type:"string",default:"latest"}).option("mount",{describe:"Mount a directory to the PHP runtime. You can provide --mount multiple times. Format: /host/path:/vfs/path",type:"array",string:!0}).option("mountBeforeInstall",{describe:"Mount a directory to the PHP runtime before installing WordPress. You can provide --mount-before-install multiple times. Format: /host/path:/vfs/path",type:"array",string:!0}).option("login",{describe:"Should log the user in",type:"boolean",default:!1}).option("blueprint",{describe:"Blueprint to execute.",type:"string"}).option("skipWordPressSetup",{describe:"Do not download, unzip, and install WordPress. Useful for mounting a pre-configured WordPress directory at /wordpress.",type:"boolean",default:!1}).option("quiet",{describe:"Do not output logs and progress messages.",type:"boolean",default:!1}).option("debug",{describe:"Print PHP error log content if an error occurs during Playground boot.",type:"boolean",default:!1}).showHelpOnFail(!1).check(r=>{if(r.wp!==void 0&&!Q(r.wp))try{new URL(r.wp)}catch{throw new Error('Unrecognized WordPress version. Please use "latest", a URL, or a numeric version such as "6.2", "6.0.1", "6.2-beta1", or "6.2-RC1"')}if(r.blueprint!==void 0){const s=v.resolve(process.cwd(),r.blueprint);if(!m.existsSync(s))throw new Error("Blueprint file does not exist");const o=m.readFileSync(s,"utf-8");try{r.blueprint=JSON.parse(o)}catch{throw new Error("Blueprint file is not a valid JSON file")}}return!0});t.wrap(t.terminalWidth());const e=await t.argv;e.quiet&&(d.handlers=[]);async function i(r){const{php:s,reap:o}=await w.processManager.acquirePHPInstance();try{await s.run({code:`<?php
				$zip = new ZipArchive();
				if(false === $zip->open('/tmp/build.zip', ZipArchive::CREATE | ZipArchive::OVERWRITE)) {
					throw new Exception('Failed to create ZIP');
				}
				$files = new RecursiveIteratorIterator(
					new RecursiveDirectoryIterator('/wordpress')
				);
				foreach ($files as $file) {
					echo $file . PHP_EOL;
					if (!$file->isFile()) {
						continue;
					}
					$zip->addFile($file->getPathname(), $file->getPathname());
				}
				$zip->close();

			`});const n=s.readFileAsBuffer("/tmp/build.zip");m.writeFileSync(r,n)}finally{o()}}function u(r,s){const o=s.map(n=>{const[f,y]=n.split(":");return{hostPath:v.resolve(process.cwd(),f),vfsPath:y}});for(const n of o)r.mkdir(n.vfsPath),r.mount(n.vfsPath,O(n.hostPath))}function P(){let r;e.blueprint?r=e.blueprint:r={preferredVersions:{php:e.php,wp:e.wp},login:e.login};const s=new q;let o="",n=!1;return s.addEventListener("progress",f=>{if(n)return;n=f.detail.progress===100;const y=Math.floor(f.detail.progress);o=f.detail.caption||o||"Running the Blueprint";const R=`${o.trim()} â€“ ${y}%`;e.quiet||c(process.stdout,R,n)}),_(r,{progress:s})}let p="";function c(r,s,o){s!==p&&(p=s,r.isTTY?(r.cursorTo(0),r.write(s),r.clearLine(1),o&&r.write(`
`)):r.write(`${s}
`))}const a=e._[0];["run-blueprint","server","build-snapshot"].includes(a)||(t.showHelp(),process.exit(1));const l=P();let w,H=!1;d.log("Starting a PHP server..."),Y({port:e.port,onBind:async r=>{const s=`http://127.0.0.1:${r}`;d.log(`Setting up WordPress ${e.wp}`);let o;const n=new k;if(!e.skipWordPressSetup){let h=!1;n.addEventListener("progress",b=>{if(h)return;const{loaded:F,total:I}=b.detail,B=Math.floor(Math.min(100,100*F/I));h=B===100,e.quiet||c(process.stdout,`Downloading WordPress ${B}%...`,h)}),o=await j(e.wp)}d.log(`Resolved WordPress release URL: ${o?.releaseUrl}`);const f=o&&v.join($,`prebuilt-wp-content-for-wp-${o.version}.zip`),y=o?m.existsSync(f)?E(f):await S(o.releaseUrl,`${o.version}.zip`,n):void 0,R={WP_DEBUG:!0,WP_DEBUG_LOG:!0,WP_DEBUG_DISPLAY:!1};d.log("Booting WordPress..."),w=await N({siteUrl:s,createPhpRuntime:async()=>await A(l.versions.php),wordPressZip:y,sqliteIntegrationPluginZip:X(n),sapiName:"cli",createFiles:{"/internal/shared/ca-bundle.crt":V.join(`
`)},constants:R,phpIniEntries:{"openssl.cafile":"/internal/shared/ca-bundle.crt",allow_url_fopen:"1",disable_functions:""},hooks:{async beforeWordPressFiles(h){e.mountBeforeInstall&&u(h,e.mountBeforeInstall)}}}),d.log("Booted!");const W=await w.getPrimaryPhp();try{if(o&&!e.mountBeforeInstall&&!m.existsSync(f)&&(d.log("Caching preinstalled WordPress for the next boot..."),m.writeFileSync(f,await Z(W,"/wordpress")),d.log("Cached!")),e.mount&&u(W,e.mount),H=!0,l){const{php:h,reap:b}=await w.processManager.acquirePHPInstance();try{d.log("Running the Blueprint..."),await M(l,h),d.log("Finished running the blueprint")}finally{b()}}a==="build-snapshot"?(await i(e.outfile),d.log(`WordPress exported to ${e.outfile}`),process.exit(0)):a==="run-blueprint"?(d.log("Blueprint executed"),process.exit(0)):d.log(`WordPress is running on ${s}`)}catch(h){if(!e.debug)throw h;const b=W.readFileAsText(L);throw new Error(b,{cause:h})}},async handleRequest(r){return H?await w.request(r):U.forHttpCode(502,"WordPress is not ready yet")}})}te();
//# sourceMappingURL=cli.js.map
